---
openapi: '3.0.0'
info:
  version: 1.0.0
  title: OntoWorks Application API
  description: OntoWorks Backend Application API documentation
  contact:
    name: Francisco Oliveira
    email: a78416@alunos.uminho.pt
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://epl.di.uminho.pt:8001/api
    description: Main server
  - url: http://localhost:5000/api
    description: Testing server

tags:
- name: Auth
  description: Requests related to User Authentication
- name: RDF4J
  description: Requests related to RDF4J Server
- name: Mongo
  description: Requests related to MongoDB
paths:
  "/auth/signup":
    post:
      tags:
      - Auth
      summary: Create new user account
      description: Create new user account.
      requestBody:
        description: User account details.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        '200':
          description: New user is created, and returns JSON user object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '500':
          description: Creation failed. Likely duplicate key (already used email)
  "/auth/login":
    post:
      tags:
      - Auth
      summary: Login with user account
      description: |
        Login with user account.
        Returns JWT token to be used as authorization for some requests and User name and email.
      requestBody:
        description: Login credentials.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
              # example:
              #   email: "kiko"
              #   password: "kiko"
      responses:
        '200':
          description: JWT access token and User info. JWT will be required in some requests for Authorization.
        '404':
          description: Login failed. Likely wrong email ou password.
  "/auth/user":
    get:
      tags:
      - Auth
      summary: Get user info from JWT
      description: |
        Decrypts JWT payload, returning some user account information.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Information returned.
        '401':
          description: Unauthorized
  "/auth/delete/{email}":
    delete:
      tags:
      - Auth
      summary: Delete user account by email
      description: |
        Delete user account with the specified email.
        Only the user himself or a admin can delete a account.
      security:
        - bearerAuth: []
      parameters:
      - in: path
        required: true
        name: email
        description: Account email to delete
        schema:
          type: string
      responses:
        '200':
          description: Account deleted
        '401':
          description: Unauthorized
        # default:
        #   description: Email doesn't exist

  # RDF4J SECTION
  "/rdf4j":
    get:
      tags:
      - RDF4J
      deprecated: true
      summary: TODO
      description: TODO
      responses:
        default:
          description: TODO
  "/rdf4j/management/listRepos":
    get:
      tags:
      - RDF4J
      summary: List Repositories
      description: Returns all existing repositories.
      responses:
        default:
          description: TODO
  "/rdf4j/query/{repository}":
    get:
      tags:
      - RDF4J
      summary: Query a Repository
      description: |
        Run a SPARQL query in a Repository.
        Because it is a GET request the query size is limited. Use the POST if needed.
      parameters:
      - in: path
        required: true
        name: repository
        description: Repository to be queried
        schema:
          type: string
      - in: query
        required: true
        name: query
        description: SPARQL query to run
        schema:
          type: string
          example: "select * where { ?s ?p ?o } limit 20"
      - in: query
        name: infer
        description: Returns infered triples? (default true)
        schema:
          type: string
          example: "true"
      responses:
        '200':
          description: Query successful
        '400':
          description: Bad request
    post:
      tags:
      - RDF4J
      summary: Query a Repository
      description: |
        Run a SPARQL query in a Repository.
      parameters:
      - in: path
        required: true
        name: repository
        description: Repository to be queried
        schema:
          type: string
      requestBody:
        # description: Login credentials.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: SPARQL query to run
                infer:
                  type: string
                  description: Returns infered triples? (default true)
              required:
                - query
              example:
                query: "select * where { ?s ?p ?o } limit 20"
                infer: "true"
      responses:
        '200':
          description: Query successful
        '400':
          description: Bad request

  # MONGO SECTION
  "/mongo":
    get:
      tags:
      - Mongo
      deprecated: true
      summary: TODO
      description: TODO
      responses:
        default:
          description: TODO
  "/users":
    get:
      tags:
      - Mongo
      summary: Users list
      description: Returns a JSON list with all the users.
      responses:
        '200':
          description: Operation successful
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
    post:
      tags:
      - Mongo
      summary: TODO
      description: TODO
      responses:
        default:
          description: TODO
  "/users/{email}":
    get:
      tags:
      - Mongo
      summary: TODO
      description: TODO
      parameters:
      - in: path
        required: true
        name: email
        description: Account email
        schema:
          type: string
      responses:
        default:
          description: TODO
    delete:
      tags:
      - Mongo
      summary: TODO
      description: TODO
      parameters:
      - in: path
        required: true
        name: email
        description: Account email
        schema:
          type: string
      responses:
        default:
          description: TODO
  "/users/{email}/password":
    put:
      tags:
      - Mongo
      summary: TODO
      description: TODO
      parameters:
      - in: path
        required: true
        name: email
        description: Account email
        schema:
          type: string
      responses:
        default:
          description: TODO


components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    User:
      required:
      - name
      - email
      - password
      properties:
        name:
          type: string
          example: "test"
        email:
          type: string
          uniqueItems: true
          example: "test@email"
        password:
          type: string
          example: "test"
    Repository:
      required:
      - id
      - name
      - owner_email
      properties:
        id:
          type: string
          uniqueItems: true
        name:
          type: string
        owner_email:
          type: string
    SavedQuery:
      required:
      - user_email
      - name
      - query
      properties:
        user_email:
          type: string
          uniqueItems: true
        name:
          type: string
          uniqueItems: true
        query:
          type: string
        repoID:
          type: string
